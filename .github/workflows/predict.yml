name: Predict taint specifications
on:
  workflow_dispatch:
    inputs:
      query_name:
        description: >
          Name of the query to run (one of NoSql, Sql, Xss, TaintedPath).
        required: true
        default: "NoSql"
      training_projects:
        description: >
          A list of projects to train on (specified either as LGTM.com slugs
          or as database names to be downloaded from Azure blob storage).
        required: true
        default: "g/bitpay/bitcore"
      test_projects:
        description: >
          A list of projects to predict new taint specifications for
          (specified as LGTM.com slugs); defaults to the same list as training_projects.
        required: false
        default: ""
      threshold:
        description: >
          Minimum score a prediction needs to have to be included.
        required: false
        default: 0.5
jobs:
  predict:
    runs-on: ubuntu-latest
    steps:
      - name: Check out this repo
        uses: actions/checkout@v2

      - name: Check out CodeQL standard library
        uses: actions/checkout@v2
        with:
          repository: github/codeql
          path: codeql-lib
          ref: lgtm.com

      - name: Download CodeQL
        uses: dsaltares/fetch-gh-release-asset@939be9e72e81fe7009b6112bc96abde38bf7b68f
        with:
          repo: "github/codeql-cli-binaries"
          version: "latest"
          file: "codeql-linux64.zip"
          target: "codeql.zip"

      - name: Set up CodeQL
        run: |
          unzip -q codeql.zip
          echo "$(readlink -f codeql)" >>$GITHUB_PATH
          mkdir $HOME/.config/codeql
          echo '--ram 6000' >$HOME/.config/codeql/config
          echo '--threads 2' >>$HOME/.config/codeql/config

      - name: Cache pip
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip # This path is specific to Ubuntu
          # Look to see if there is a cache hit for the corresponding requirements file
          key: ${{ runner.os }}-pip-${{ hashFiles('code/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            ${{ runner.os }}-

      - name: Install dependencies
        run: |
          sudo apt-get install coinor-cbc
          python -m pip install --upgrade pip
          pip install virtualenv
          virtualenv env
          source env/bin/activate
          pip install -r code/requirements.txt
          python -m pip install -i https://pypi.gurobi.com gurobipy

      - name: Train model
        env:
          ATM_BLOB_STORE_SAS_TOKEN: ${{ secrets.ATM_BLOB_STORE_SAS_TOKEN }}
        run: |
          source env/bin/activate
          ./scripts/train.sh \
            "${{ github.event.inputs.query_name }}" \
            "${{ github.event.inputs.training_projects }}"

      - name: Predict new sinks
        env:
          LGTM_TOKEN: ${{ secrets.LGTM_TOKEN }}
        run: |
          source env/bin/activate
          n=$(compgen -G "allscores_*.txt" | wc -l)
          if [ $n -ne 1 ]; then
            echo "Expected a single scores file; got $n."
            exit 1
          fi
          ./scripts/predict.sh \
            "${{ github.event.inputs.query_name }}" \
            $(compgen -G "allscores_*.txt") \
            "${{ github.event.inputs.test_projects || github.event.inputs.training_projects }}" \
            "${{ github.event.inputs.threshold }}"

      - name: Upload scores
        uses: actions/upload-artifact@v2
        with:
          name: scores
          path: "allscores_*.txt"
